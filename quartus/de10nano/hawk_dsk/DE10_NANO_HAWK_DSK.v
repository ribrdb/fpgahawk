
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE10_NANO_HAWK_DSK(

	//////////// SD SPI //////////
	output SD_SPI_CS,
	input SD_SPI_MISO,
	output SD_SPI_CLK,
	output SD_SPI_MOSI,

	//////////// CLOCK //////////
	input 		          		FPGA_CLK1_50,
	input 		          		FPGA_CLK2_50,
	input 		          		FPGA_CLK3_50
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire clk_100;
wire clk_25;
wire clk_2_5;
wire clk_dsk;
wire clk_wr_data;

wire reset;

wire cyl_strobe;
wire [8:0] cylad;
wire rtzs;
wire [1:0] hs;
wire wr_data;
wire wr_en;
wire read_en;
wire unit_select;
wire on_cyl;
wire interrupt;
wire rd_data;
wire rd_clock;
wire index;
wire sector;
wire seek_err;
wire adint;
wire fault;
wire ready;
wire wrstat;
wire [4:0] saddr;
wire addr_ack;
wire density;

wire [14:0] dsk_addr;
wire [1:0] dsk_cmd;
wire [1:0] dsk_cmd_size;
wire [29:0] probes;
wire [21:0] sources;

//=======================================================
//  Structural coding
//=======================================================

	assign probes = {cyl_strobe, cylad, hs, wr_en, read_en, on_cyl, interrupt, index, sector, seek_err, adint, fault, ready, wrstat, saddr, addr_ack, density};
	assign {dsk_addr, dsk_cmd, dsk_cmd_size, rtzs, unit_select, reset} = sources;

	clocks qsys0 (
		.clk_clk             (FPGA_CLK1_50),             //           clk.clk
		.pll_0_clk_100_clk   (clk_100),   // pll_0_clk_100.clk
		.pll_0_clk_25_clk    (clk_25),    //  pll_0_clk_25.clk
		.pll_0_clk_2_5_clk   (clk_2_5),   // pll_0_clk_2_5.clk
		.pll_1_outclk0_clk   (clk_dsk),   // pll_1_outclk0.clk
		.reset_reset_n       (reset)        //         reset.reset_n
	);

	probes probes0 (
		.source (sources), // sources.source
		.probe  (probes)   //  probes.probe
	);
	
	global g0 (.in(wr_data), .out(clk_wr_data));
	


	Hawk hawk0(
		.clk(clk_100),
		.sd_clk(clk_25),
		.data_clk(clk_2_5),
		.i_cyl_strobe(cyl_strobe),
		.cylad(cylad),
		.i_rtzs(rtzs),
		.hs(hs),
		.wr_data(clk_wr_data),
		.i_wr_en(wr_en),
		.i_read_en(read_en),
		.unit_select(unit_select),
		.sd_miso(SD_SPI_MISO),

		.o_on_cyl(on_cyl),
		.interrupt(interrupt),
		.o_rd_data(rd_data),
		.o_rd_clock(rd_clock),
		.o_index(index),
		.o_sector(sector),
		.o_seek_err(seek_err),
		.o_adint(adint),
		.o_fault(fault),
		.o_ready(ready),
		.o_wrstat(wrstat),
		.o_saddr(saddr),
		.o_addr_ack(addr_ack),
		.o_density(density),
		.sd_cs(SD_SPI_CS),
		.sd_mosi(SD_SPI_MOSI),
		.sd_sclk(SD_SPI_CLK)
	);

	FakeDSK dsk0(
		.clk(clk_dsk),
		.addr(dsk_addr),
		.cmd(dsk_cmd),
		.size(dsk_cmd_size),
		.hawk_cyl_strobe(cyl_strobe),
		.hawk_cylad(cylad),
		.hawk_hs(hs),
		.hawk_wr_data(wr_data),
		.hawk_wr_en(wr_en),
		.hawk_read_en(read_en),
		.hawk_on_cyl(on_cyl),
		.hawk_interrupt(interrupt),
		.hawk_rd_data(rd_data),
		.hawk_rd_clock(rd_clock),
		.hawk_index(index),
		.hawk_sector(sector),
		.hawk_ready(ready),
		.hawk_sa(saddr)
	);

endmodule
